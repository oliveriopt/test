from airflow import DAG
from airflow.utils.dates import days_ago
from airflow.decorators import task
from airflow.operators.empty import EmptyOperator
from airflow.providers.google.cloud.hooks.bigquery import BigQueryHook

import yaml
from pathlib import Path

CONFIG_PATH = "include/config/qa_config.yaml"
BQ_CONN_ID = "google_cloud_default"
BQ_LOCATION = "us-central1"

with DAG(
    dag_id="qa_read_query_and_secret",
    start_date=days_ago(1),
    schedule_interval=None,
    catchup=False,
    tags=["qa", "bq"]
) as dag:

    start = EmptyOperator(task_id="start")

    @task()
    def read_config():
        config_path = Path(CONFIG_PATH)
        with open(config_path, 'r') as file:
            config = yaml.safe_load(file)
        return config["tables"]

    @task()
    def get_query_text(table_config):
        catalog = table_config["table_catalog"]
        schema = table_config["table_schema"]
        table = table_config["table_name"]

        bq_hook = BigQueryHook(gcp_conn_id=BQ_CONN_ID, use_legacy_sql=False)
        query_sql = f"""
            SELECT query_text FROM `rxo-dataeng-datalake-np.dataops_admin.qa_query_plan`
            WHERE table_catalog = '{catalog}' AND table_schema = '{schema}' AND table_name = '{table}'
        """
        df = bq_hook.get_pandas_df(query_sql, location=BQ_LOCATION)
        if df.empty:
            raise ValueError(f"No query_text found for {catalog}.{schema}.{table}")

        table_config["query"] = df["query_text"].iloc[0]
        return table_config

    @task()
    def get_secret_id(table_config):
        catalog = table_config["table_catalog"]
        schema = table_config["table_schema"]
        table = table_config["table_name"]

        bq_hook = BigQueryHook(gcp_conn_id=BQ_CONN_ID, use_legacy_sql=False)
        secret_sql = f"""
            SELECT secret_id FROM `rxo-dataeng-datalake-np.dataops_admin.table_extraction_metadata`
            WHERE database_name = '{catalog}' AND schema_name = '{schema}' AND table_name = '{table}'
        """
        df = bq_hook.get_pandas_df(secret_sql, location=BQ_LOCATION)
        if df.empty:
            raise ValueError(f"No secret_id found for {catalog}.{schema}.{table}")

        table_config["secret_id"] = df["secret_id"].iloc[0]
        return table_config

    config = read_config()
    with_queries = config.map(get_query_text)
    with_secrets = with_queries.map(get_secret_id)

    start >> with_secrets
