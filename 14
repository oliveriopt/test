from airflow import DAG
from airflow.decorators import task
from airflow.providers.google.cloud.operators.dataflow import DataflowStartFlexTemplateOperator
from airflow.utils.dates import days_ago
from airflow.models.baseoperator import chain
from airflow.operators.empty import EmptyOperator
from airflow.operators.python import PythonOperator
from google.cloud import bigquery
import json

# --- Config ---
PROJECT_ID = "rxo-dataeng-datalake-np"
BQ_DATASET = "dataops_admin"
TABLE_NAME = "xpomaster_information_schema"
PIPELINE_NAME = "qa_pipeline"
REGION = "us-central1"
GCS_TEMPLATE_PATH = "gs://your-bucket/templates/flex_template.json"
SECRET_MANAGER_PROJECT = "your-secret-project"
SECRET_NAME = "your-secret-name"

DEFAULT_ARGS = {"owner": "airflow", "start_date": days_ago(1)}

with DAG(
    dag_id="dag_qa_pipeline_parallel_v4",
    default_args=DEFAULT_ARGS,
    schedule_interval=None,
    catchup=False,
    description="QA pipeline that launches 5 FlexTemplates in parallel",
) as dag:

    start = EmptyOperator(task_id="start")

    @task()
    def read_config():
        return {"catalog": "your_catalog", "schema": "your_schema", "table": "your_table"}

    @task()
    def get_queries(config: dict):
        client = bigquery.Client(project=PROJECT_ID)
        query = f"""
            SELECT query_text
            FROM `{PROJECT_ID}.{BQ_DATASET}.qa_query_plan`
            WHERE table_catalog = '{config['catalog']}'
              AND table_schema = '{config['schema']}'
              AND table_name = '{config['table']}'
        """
        results = client.query(query).result()
        return [row.query_text for row in results]

    @task()
    def get_secret_id():
        return f"projects/{SECRET_MANAGER_PROJECT}/secrets/{SECRET_NAME}/versions/latest"

    config = read_config()
    queries = get_queries(config)
    secret_id = get_secret_id()

    flex_tasks = []
    for i in range(5):
        task_id = f"run_flex_template_{i}"

        run_flex = DataflowStartFlexTemplateOperator(
            task_id=task_id,
            project_id=PROJECT_ID,
            region=REGION,
            body={
                "launchParameter": {
                    "jobName": f"{PIPELINE_NAME}_{i}",
                    "containerSpecGcsPath": GCS_TEMPLATE_PATH,
                    "parameters": {
                        "query": f"{{{{ ti.xcom_pull(task_ids='get_queries')[{i}] }}}}",
                        "secret_id": "{{ ti.xcom_pull(task_ids='get_secret_id') }}"
                    },
                }
            },
            location=REGION,
            wait_until_finished=False,
        )
        flex_tasks.append(run_flex)

        # set upstreams explicitly
        chain(config, queries, secret_id, run_flex)

    end = EmptyOperator(task_id="end")
    start >> config
    for t in flex_tasks:
        t >> end
