from airflow import DAG
from airflow.operators.python import PythonOperator
from airflow.providers.google.cloud.operators.dataflow import DataflowStartFlexTemplateOperator
from airflow.providers.google.cloud.hooks.bigquery import BigQueryHook
from airflow.utils.dates import days_ago
from airflow.utils.task_group import TaskGroup
import yaml
import os
from datetime import datetime
import uuid

# === Configuración global ===
default_args = {
    "owner": "dataops",
    "retries": 1,
}

PROJECT_ID = "rxo-dataeng-datalake-np"
REGION = "us-central1"
SERVICE_ACCOUNT = "ds-dataflow-dataeng-gsa@rxo-dataeng-datalake-np.iam.gserviceaccount.com"
SUBNETWORK = "https://www.googleapis.com/compute/v1/projects/nxo-corp-infra/regions/us-central1/subnetworks/rxo-dataeng-datalake-np-uscentral1"
TEMPLATE_GCS_PATH = "gs://rxo-dataeng-datalake-np-dataflow/templates/sql_to_parquet.json"

yaml_path = os.path.join(os.path.dirname(__file__), "include", "qa_config.yaml")

# === Tarea: leer YAML ===
def read_config_task(**kwargs):
    with open(yaml_path, "r") as f:
        config = yaml.safe_load(f)
    required_keys = {"table_catalog", "table_schema", "table_name"}
    if not required_keys.issubset(config):
        raise ValueError(f"Missing keys in YAML config: {required_keys}")
    kwargs["ti"].xcom_push(key="config", value=config)

# === Tarea: obtener secret_id ===
def get_secret_id_task(**kwargs):
    from airflow.operators.python import get_current_context
    context = get_current_context()
    ti = context["ti"]
    config = ti.xcom_pull(task_ids="read_config", key="config")
    catalog, schema, table = config["table_catalog"], config["table_schema"], config["table_name"]

    query = f"""
        SELECT secret_id
        FROM `rxo-dataeng-datalake-np.dataops_admin.table_extraction_metadata`
        WHERE database_name = '{catalog}' AND schema_name = '{schema}' AND table_name = '{table}'
        LIMIT 1
    """
    hook = BigQueryHook(gcp_conn_id="google_cloud_default", use_legacy_sql=False)
    df = hook.get_pandas_df(query, location="us-central1")
    if df.empty:
        raise ValueError(f"No secret_id found for {catalog}.{schema}.{table}")
    ti.xcom_push(key="secret_id", value=df["secret_id"].iloc[0])

# === Tarea: obtener todas las queries asociadas a la tabla ===
def get_all_queries_task(**kwargs):
    from airflow.operators.python import get_current_context
    context = get_current_context()
    ti = context["ti"]
    config = ti.xcom_pull(task_ids="read_config", key="config")
    catalog, schema, table = config["table_catalog"], config["table_schema"], config["table_name"]

    query = f"""
        SELECT query_text
        FROM `rxo-dataeng-datalake-np.dataops_admin.qa_query_plan`
        WHERE table_catalog = '{catalog}' AND table_schema = '{schema}' AND table_name = '{table}'
        LIMIT 5
    """
    hook = BigQueryHook(gcp_conn_id="google_cloud_default", use_legacy_sql=False)
    df = hook.get_pandas_df(query, location="us-central1")
    if df.empty:
        raise ValueError(f"No queries found for {catalog}.{schema}.{table}")
    ti.xcom_push(key="queries", value=df["query_text"].tolist())

# === Función para generar una tarea Dataflow por query ===
def build_and_run_flex(index):
    def _inner():
        from airflow.operators.python import get_current_context
        context = get_current_context()
        ti = context["ti"]
        config = ti.xcom_pull(task_ids="read_config", key="config")
        secret_id = ti.xcom_pull(task_ids="get_secret_id", key="secret_id")
        queries = ti.xcom_pull(task_ids="get_all_queries", key="queries")

        catalog, schema, table = config["table_catalog"], config["table_schema"], config["table_name"]
        query_text = queries[index]
        today = datetime.utcnow()
        output_path = (
            f"gs://rxo-dataeng-datalake-np-raw/qa/{catalog}/{schema}/{table}/"
            f"{today.year:04d}/{today.month:02d}/{today.day:02d}/"
            f"data-{uuid.uuid4().hex[:8]}.parquet"
        )

        return {
            "launchParameter": {
                "jobName": f"sqlserver-to-gcs-{table.lower()}-{index}-{today.strftime('%Y%m%d%H%M%S')}",
                "containerSpecGcsPath": TEMPLATE_GCS_PATH,
                "environment": {
                    "serviceAccountEmail": SERVICE_ACCOUNT,
                    "subnetwork": SUBNETWORK,
                    "tempLocation": "gs://dataflow-staging-us-central1-387408803089/temp_files",
                    "stagingLocation": "gs://dataflow-staging-us-central1-387408803089/staging_area",
                    "ipConfiguration": "WORKER_IP_PRIVATE"
                },
                "parameters": {
                    "query": query_text,
                    "secret_id": secret_id,
                    "gcp_pr": PROJECT_ID,
                    "output_path": output_path
                }
            }
        }
    return _inner

# === DAG ===
with DAG(
    dag_id="dag_qa_pipeline_parallel",
    default_args=default_args,
    start_date=days_ago(1),
    schedule_interval=None,
    catchup=False,
    tags=["qa", "flex", "parallel"],
) as dag:

    read_config = PythonOperator(
        task_id="read_config",
        python_callable=read_config_task,
    )

    get_secret_id = PythonOperator(
        task_id="get_secret_id",
        python_callable=get_secret_id_task,
    )

    get_all_queries = PythonOperator(
        task_id="get_all_queries",
        python_callable=get_all_queries_task,
    )

    with TaskGroup("run_flex_templates") as flex_group:
        for i in range(5):
            DataflowStartFlexTemplateOperator(
                task_id=f"run_flex_{i}",
                project_id=PROJECT_ID,
                location=REGION,
                body=build_and_run_flex(i)(),
                gcp_conn_id="google_cloud_default",
            )

    read_config >> [get_secret_id, get_all_queries] >> flex_group
